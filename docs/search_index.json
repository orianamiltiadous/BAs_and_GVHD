[["index.html", "Microbial Bile Acid Metabolism Shapes T Cell Responses During Inflammation Chapter 1 Microbial Bile Acid Metabolism Shapes T Cell Responses During Inflammation", " Microbial Bile Acid Metabolism Shapes T Cell Responses During Inflammation Oriana Miltiadous 2023-08-18 Chapter 1 Microbial Bile Acid Metabolism Shapes T Cell Responses During Inflammation "],["introduction-load-the-datasets.html", "Chapter 2 Introduction: load the datasets 2.1 Load packages 2.2 Load datasets", " Chapter 2 Introduction: load the datasets 2.1 Load packages library(janitor) library(readxl) library(tidyverse) library(ggpubr) library(data.table) 2.2 Load datasets #patient cohort cohort_BAS&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/cohort_BAS.csv&quot;) ursodiol&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/ursodiol.csv&quot;) #metabolomics data #concentrations conc_all_filtered&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/conc_all_filtered.csv&quot;) filtered_combined_table&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/filtered_combined_table.csv&quot;) #annotations ba_families&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/ba_families.csv&quot;) #16s data counts_samples &lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/counts_samples.csv&quot;) asv_annotation_blast_ag&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/asv_annotation_blast_ag.csv&quot;) asv_alpha_all&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/asv_alpha_all.csv&quot;) asv_annotation_blast_color_ag&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/asv_annotation_blast_color_ag.csv&quot;) #shotgun data BSH_metalphlan &lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/BSH_metalphlan.csv&quot;) bai_genes_clean&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/bai_genes_clean.csv&quot;) taxa_bas_later&lt;-read_csv(&quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/taxa_bas_later.csv&quot;) #ursodiol cohort: double check that it&#39;s ok to share patients_urso_CIF&lt;- read_csv( &quot;/Volumes/vandenbrinklab/Oriana/BAs_published_datasets/don&#39;t include/patients_urso_CIF.csv&quot;) categorize_bile_acids &lt;- function(df, ba_families){ df %&gt;% left_join(ba_families) %&gt;% mutate(primary_pool=ifelse(prim_vs_sec==&quot;Primary&quot;, value, 0)) %&gt;% mutate(secondary_pool=ifelse(prim_vs_sec==&quot;Secondary&quot;, value, 0)) %&gt;% mutate(sulfated_pool=ifelse(sulfated==&quot;Y&quot;, value, 0)) %&gt;% mutate(conjugated_pool=ifelse(amidated==&quot;Y&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(unconjugated_pool=ifelse(amidated==&quot;N&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(secondary_nonUDCA=ifelse(prim_vs_sec==&quot;Secondary&quot; &amp; udca==&quot;N&quot;, value, 0)) %&gt;% mutate(total_BAs=value) %&gt;% mutate(total_nonUDCA_pool=ifelse(udca==&quot;N&quot;, value, 0)) %&gt;% mutate(glycine_pool=ifelse(glycine==&quot;Y&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(taurine_pool=ifelse(taurine==&quot;Y&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(taurine_SBA_pool=ifelse(taurine==&quot;Y&quot; &amp; prim_vs_sec==&quot;Secondary&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(taurine_PBA_pool=ifelse(taurine==&quot;Y&quot; &amp; prim_vs_sec==&quot;Primary&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(glycine_SBA_pool=ifelse(glycine==&quot;Y&quot;&amp; prim_vs_sec==&quot;Secondary&quot; &amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% mutate(glycine_PBA_pool=ifelse(glycine==&quot;Y&quot; &amp;prim_vs_sec==&quot;Primary&quot;&amp; sulfated==&quot;N&quot;, value, 0)) %&gt;% select(-colnames(ba_families), -value) } "],["analyze-the-effect-of-udca-administration-on-the-bile-acid-pool-supplementary-figure-5.html", "Chapter 3 Analyze the effect of UDCA administration on the bile acid pool (supplementary figure 5) 3.1 Plot ursodiol exposure and secondary BAs concentrations 3.2 Plot correlation of ursodiol with other bile acid pools: plot conjugated UDCA (tauroursodeoxycholic_acid+glycoursodeoxycholic_acid), TBAs (total_BAs), PBAs (primary_pool), SBAs (secondary_pool), nonUDCA total BAs (total_nonUDCA_pool), nonUDCA SBAs (secondary_nonUDCA), secondary/primary ratio (SP_ratio) 3.3 Create correlation plots to evaluate association of UDCA with all individual BAs", " Chapter 3 Analyze the effect of UDCA administration on the bile acid pool (supplementary figure 5) #summarize bile acid pools both_conc&lt;- cohort_BAS %&gt;% select(-ursodiol)%&gt;% left_join(conc_all_filtered) %&gt;% clean_names() #prep dataset prepping each BA depending on its classifications both_conc_pools&lt;-both_conc %&gt;% gather(&quot;bile_acid&quot;, &quot;value&quot;, names(.)[8]:names(.)[ncol(.)]) %&gt;% select(-gi_gvhd, -later, -periengr) %&gt;% filter(bile_acid!=&quot;beta_muricholic_acid&quot;) %&gt;% #removing because it&#39;s not measured in all samples filter(bile_acid!=&quot;omega_muricholic_acid&quot;) %&gt;% #removing because it&#39;s not measured in all samples categorize_bile_acids(ba_families) both_conc_pools_final&lt;-both_conc_pools %&gt;% group_by(sampleid) %&gt;% summarise(across(where(is.numeric), sum)) %&gt;% left_join(ursodiol) #rearrange ursodiol both_conc_pools_final$ursodiol &lt;-factor(both_conc_pools_final$ursodiol, levels=c(&quot;Y&quot;,&quot;2-3w&quot;,&quot;3-4w&quot;,&quot;1-2m&quot;, &quot;N&quot;)) ##Evaluation of ursodiol exposure and UDCA concentration ursodiol_BAs&lt;-both_conc %&gt;% left_join(ursodiol) #rearrange ursodiol ursodiol_BAs$ursodiol &lt;-factor(ursodiol_BAs$ursodiol, levels=c(&quot;Y&quot;,&quot;2-3w&quot;,&quot;3-4w&quot;,&quot;1-2m&quot;, &quot;N&quot;)) ursodiol_BAs %&gt;% ggplot(aes(x=ursodiol, y=log10(`ursodeoxycholic_acid`), color=ursodiol)) + geom_boxplot(width=0.2, outlier.shape =NA, lwd=.7)+ geom_jitter(width=0.2, alpha=0.2)+ theme_classic() + xlab(&quot;ursodiol exposure&quot;)+ stat_compare_means(comparisons=list( c(&quot;Y&quot;, &quot;2-3w&quot;),c(&quot;3-4w&quot;, &quot;Y&quot;), c(&quot;Y&quot;, &quot;1-2m&quot;), c(&quot;N&quot;, &quot;Y&quot;), c(&quot;3-4w&quot;, &quot;2-3w&quot;),c(&quot;1-2m&quot;, &quot;2-3w&quot;), c(&quot;N&quot;, &quot;2-3w&quot;), c(&quot;1-2m&quot;, &quot;3-4w&quot;), c(&quot;N&quot;, &quot;3-4w&quot;), c(&quot;N&quot;, &quot;1-2m&quot;) ), #label=&quot;p.signif&quot;, method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;#a6611a&quot;, &quot;#bf812d&quot;,&quot;#dfc27d&quot;, &quot;#80cdc1&quot;, &quot;#018571&quot;))+ theme(legend.position=&quot;none&quot;) 3.1 Plot ursodiol exposure and secondary BAs concentrations both_conc_pools_final %&gt;% ggplot(aes(x=ursodiol, y=log10(secondary_pool), color=ursodiol)) + geom_boxplot(width=0.2, outlier.shape =NA, lwd=.7)+ geom_jitter(width=0.2, alpha=0.2)+ theme_classic() + xlab(&quot;ursodiol exposure&quot;)+ stat_compare_means(comparisons=list( c(&quot;Y&quot;, &quot;2-3w&quot;),c(&quot;3-4w&quot;, &quot;Y&quot;), c(&quot;Y&quot;, &quot;1-2m&quot;), c(&quot;N&quot;, &quot;Y&quot;), c(&quot;3-4w&quot;, &quot;2-3w&quot;),c(&quot;1-2m&quot;, &quot;2-3w&quot;), c(&quot;N&quot;, &quot;2-3w&quot;), c(&quot;1-2m&quot;, &quot;3-4w&quot;), c(&quot;N&quot;, &quot;3-4w&quot;), c(&quot;N&quot;, &quot;1-2m&quot;) ), #label=&quot;p.signif&quot;, method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;#a6611a&quot;, &quot;#bf812d&quot;,&quot;#dfc27d&quot;, &quot;#80cdc1&quot;, &quot;#018571&quot;))+ theme(legend.position=&quot;none&quot;) 3.2 Plot correlation of ursodiol with other bile acid pools: plot conjugated UDCA (tauroursodeoxycholic_acid+glycoursodeoxycholic_acid), TBAs (total_BAs), PBAs (primary_pool), SBAs (secondary_pool), nonUDCA total BAs (total_nonUDCA_pool), nonUDCA SBAs (secondary_nonUDCA), secondary/primary ratio (SP_ratio) both_conc_pools_final %&gt;% mutate(SP_ratio=secondary_pool/primary_pool) %&gt;% mutate(SP_ratio_nonUDCA=secondary_nonUDCA/primary_pool) %&gt;% left_join(both_conc %&gt;% select(sampleid, glycoursodeoxycholic_acid, tauroursodeoxycholic_acid, ursodeoxycholic_acid)) %&gt;% ggplot(aes(y=log10(`ursodeoxycholic_acid`+2.5), x=log10(secondary_pool+2.5)))+ geom_point(size=0.8, alpha=0.4)+ geom_smooth(method=&quot;lm&quot;)+ stat_cor(method = &quot;pearson&quot;)+ #ylab(&quot;log10(UDCA)&quot;)+ #xlab(&quot;log10(PS_nonUDCA)&quot;)+ theme_classic() 3.3 Create correlation plots to evaluate association of UDCA with all individual BAs library(corrplot) precor_data&lt;- filtered_combined_table %&gt;% column_to_rownames(&quot;sampleid&quot;) cor_data&lt;-cor(precor_data, use = &quot;complete.obs&quot;) corrplot(cor_data) 3.3.1 Visualization of significant correlations of UDCA with individual BAs (R&gt;0.4) precor_data_selected&lt;- filtered_combined_table %&gt;% column_to_rownames(&quot;sampleid&quot;) %&gt;% select(ursodeoxycholic_acid, ursocholic_acid, beta_muricholic_acid, ursodeoxycholic_acid_3_sulfate, x7_ketodeoxycholic_acid, x7_ketolithocholic_acid, gamma_muricholic_acid, cholic_acid, chenodeoxycholic_acid, x3_oxo_cholic_acid) cor_data_selected&lt;-cor(precor_data_selected, use = &quot;complete.obs&quot;) corrplot(cor_data_selected, method = &quot;number&quot;, type = &quot;upper&quot;) "],["create-the-bile-acid-pools-figure-4-supplementary-figure-68.html", "Chapter 4 Create the bile acid pools (figure 4, supplementary figure 6,8) 4.1 Create BA pools first for peri-GVHD-onset timepoint 4.2 Create BA pools for peri-engraftment timepoint", " Chapter 4 Create the bile acid pools (figure 4, supplementary figure 6,8) 4.1 Create BA pools first for peri-GVHD-onset timepoint later&lt;- cohort_BAS %&gt;%filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% select(sampleid, GI_GVHD) %&gt;% left_join(conc_all_filtered) #prep dataset prepping each BA depending on its classifications later_pools&lt;-later %&gt;% gather(&quot;bile_acid&quot;, &quot;value&quot;, names(.)[5]:names(.)[ncol(.)]) %&gt;% categorize_bile_acids(ba_families) #replace NAs with 0 to be able to add sums later_pools[is.na(later_pools)]&lt;-0 later_pools_final&lt;-later_pools %&gt;% #gather(&quot;bile_acid&quot;, &quot;value&quot;, names(.)[2]:names(.)[ncol(.)]) %&gt;% #summarise(sum_group=sum(value)) group_by(sampleid) %&gt;% summarise(across(where(is.numeric), sum)) 4.1.1 Plot: TBAs (total_BAs), PBAs (primary_pool), SBAs (secondary_pool), nonUDCA SBAs (secondary_nonUDCA), conjugated (conjugated_pool), unconjugated (unconjugated_pool), sulfated (sulfated_pool) later_pools_final %&gt;% left_join(cohort_BAS) %&gt;% mutate(GI_GVHD=ifelse(GI_GVHD==&quot;Y&quot;, &quot;GVHD&quot;, &quot;CTRL&quot;)) %&gt;% mutate(sp_ratio=secondary_pool/primary_pool) %&gt;% mutate(sp_nonUDCA_ratio=secondary_nonUDCA/primary_pool) %&gt;% mutate(unconj_conj=unconjugated_pool/conjugated_pool) %&gt;% ggplot(aes(x=GI_GVHD, y=log10(unconj_conj), colour=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(unconj_conj)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;CTRL&quot;, &quot;GVHD&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 4.1.2 Create pies dataset_pre&lt;-later_pools_final %&gt;% gather(&quot;BA_pool&quot;, &quot;value&quot;, names(.)[2]:names(.)[ncol(.)]) %&gt;% left_join(cohort_BAS %&gt;% select(sampleid, GI_GVHD, later, ursodiol)) %&gt;% filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% select(-ursodiol, -later) %&gt;% group_by(GI_GVHD, BA_pool) %&gt;% summarise(ave_pool=ave(value)) %&gt;% slice(1) dataset_pre2&lt;-dataset_pre %&gt;% #filter(BA_pool==&quot;primary_pool&quot;|BA_pool==&quot;secondary_nonUDCA&quot;) %&gt;% #to evaluate nonUDCA secondary and primary polls #filter(BA_pool==&quot;primary_pool&quot;|BA_pool==&quot;secondary_pool&quot;) %&gt;% #to evaluate total secondary filter(BA_pool==&quot;glycine_pool&quot;|BA_pool==&quot;taurine_pool&quot;|BA_pool==&quot;sulfated_pool&quot;|BA_pool==&quot;unconjugated_pool&quot;) %&gt;% rename(group=BA_pool) %&gt;% rename(value=ave_pool) %&gt;% ungroup() %&gt;% group_by(GI_GVHD) %&gt;% mutate(sum_value=sum(value)) %&gt;% mutate(perc=value/sum_value) %&gt;% mutate(labels = scales::percent(perc)) %&gt;% ungroup() #only run below when evaluating glycine/taurine conjugation as wel #define order of piechart for glycine/taurin conjugation dataset_pre2$group &lt;- factor(dataset_pre2$group, levels = c(&quot;glycine_pool&quot;, &quot;taurine_pool&quot;,&quot;unconjugated_pool&quot;,&quot;sulfated_pool&quot;)) cp&lt;-coord_polar(theta=&quot;y&quot;) cp$is_free&lt;-function()TRUE ggplot(dataset_pre2, aes(x=&quot;&quot;, y=perc, fill=group))+ geom_bar(stat=&quot;identity&quot;, width=1)+cp+ facet_wrap(.~GI_GVHD, scales=&quot;free&quot;)+ geom_text(aes(label = labels), position = position_stack(vjust = 0.5)) + theme_void()+ theme(axis.ticks=element_blank(), axis.title=element_blank(), axis.text.y=element_blank())+ scale_fill_manual(values=c(&quot;green4&quot;,&quot;chartreuse3&quot;,&quot;dodgerblue2&quot;,&quot;purple2&quot;)) #to evaluated amidation/sulfation 4.2 Create BA pools for peri-engraftment timepoint periengr_conc&lt;- cohort_BAS %&gt;%filter(periengr==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% select(sampleid, GI_GVHD) %&gt;% left_join(conc_all_filtered) %&gt;% select(-`beta_muricholic_acid`, -`omega_muricholic_acid`) #remove since it is not measured in all samples #prep dataset prepping each BA depending on its classifications periengr_pools&lt;-periengr_conc %&gt;% gather(&quot;bile_acid&quot;, &quot;value&quot;, names(.)[3]:names(.)[ncol(.)]) %&gt;% categorize_bile_acids(ba_families) #replace NAs with 0 to be able to add sums periengr_pools[is.na(periengr_pools)]&lt;-0 #final table with each group sum periengr_pools_final&lt;-periengr_pools %&gt;% group_by(sampleid) %&gt;% summarise(across(where(is.numeric), sum)) 4.2.1 Plot BA pools and GVHD; can plot total BAs (total_BAs), PBAs (primary_pool), SBAs (secondary_pool), nonUDCA SBAs (secondary_nonUDCA), conjugated (conjugated_pool), unconjugated (unconjugated_pool), sulfated_pool, secondary/primary ratio and secondary*/primary ratio periengr_pools_final %&gt;% left_join(cohort_BAS) %&gt;% mutate(GI_GVHD=ifelse(GI_GVHD==&quot;Y&quot;, &quot;GVHD&quot;, &quot;CTRL&quot;)) %&gt;% mutate(sp_ratio=secondary_pool/primary_pool) %&gt;% mutate(sp_nonUDCA_ratio=secondary_nonUDCA/primary_pool) %&gt;% ggplot(aes(x=GI_GVHD, y=log10(sulfated_pool), colour=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ #ylab(&quot;log10(sulfated_pool)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;CTRL&quot;, &quot;GVHD&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 4.2.2 Create pies dataset_pre&lt;-periengr_pools_final %&gt;% gather(&quot;BA_pool&quot;, &quot;value&quot;, names(.)[2]:names(.)[ncol(.)]) %&gt;% left_join(cohort_BAS %&gt;% select(sampleid, GI_GVHD, ursodiol)) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% group_by(GI_GVHD, BA_pool) %&gt;% summarise(ave_pool=ave(value)) %&gt;% slice(1) dataset_pre2&lt;-dataset_pre %&gt;% filter(BA_pool==&quot;primary_pool&quot;|BA_pool==&quot;secondary_nonUDCA&quot;) %&gt;% #to evaluate nonUDCA secondary and primary #filter(BA_pool==&quot;primary_pool&quot;|BA_pool==&quot;secondary_pool&quot;) %&gt;% #to evaluate total secondary #filter(BA_pool==&quot;glycine_pool&quot;|BA_pool==&quot;taurine_pool&quot;|BA_pool==&quot;sulfated_pool&quot;|BA_pool==&quot;unconjugated_pool&quot;) %&gt;% rename(group=BA_pool) %&gt;% rename(value=ave_pool) %&gt;% ungroup() %&gt;% group_by(GI_GVHD) %&gt;% mutate(sum_value=sum(value)) %&gt;% mutate(perc=value/sum_value) %&gt;% mutate(labels = scales::percent(perc)) %&gt;% ungroup() #only run to evaluate glycine/taurine conjugation #define order of piechart for glycine/taurin conjugation #dataset_pre2$group &lt;- factor(dataset_pre2$group, levels = c(&quot;glycine_pool&quot;, &quot;taurine_pool&quot;,&quot;unconjugated_pool&quot;,&quot;sulfated_pool&quot;)) cp&lt;-coord_polar(theta=&quot;y&quot;) cp$is_free&lt;-function()TRUE ggplot(dataset_pre2, aes(x=&quot;&quot;, y=perc, fill=group))+ geom_bar(stat=&quot;identity&quot;, width=1)+cp+ facet_wrap(.~GI_GVHD, scales=&quot;free&quot;)+ geom_text(aes(label = labels), position = position_stack(vjust = 0.5)) + theme_void()+ theme(axis.ticks=element_blank(), axis.title=element_blank(), axis.text.y=element_blank())+ #scale_fill_manual(values=c(&quot;green4&quot;,&quot;chartreuse3&quot;,&quot;dodgerblue2&quot;,&quot;purple2&quot;)) scale_fill_manual(values=c(&quot;#E7861B&quot;,&quot;darkgoldenrod1&quot;)) #for primary/secondary "],["evaluate-t-cell-modulatory-bas-in-patients-with-gvhd-vs-controls-figure-4.html", "Chapter 5 Evaluate T cell modulatory BAs in patients with GVHD vs controls (figure 4) 5.1 3oxoLCA 5.2 isoLCA 5.3 isoDCA 5.4 OMCA", " Chapter 5 Evaluate T cell modulatory BAs in patients with GVHD vs controls (figure 4) 5.1 3oxoLCA filtered_combined_table %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% ggplot(aes(y=log10(dehydrolithocholic_acid+25000), x=GI_GVHD, color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(3oxoLCA)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 5.2 isoLCA filtered_combined_table %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% ggplot(aes(y=log10(isolithocholic_acid+25000), x=GI_GVHD, color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(isoLCA)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 5.3 isoDCA filtered_combined_table %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% ggplot(aes(y=log10(isodeoxycholic_acid+25000), x=GI_GVHD, color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(isoDCA)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 5.4 OMCA conc_all_filtered %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% filter(ursodiol==&quot;Y&quot;) %&gt;% ggplot(aes(y=log10(omega_muricholic_acid+2.5), x=GI_GVHD, color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(OMCA)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) "],["shotgun-metagenomic-sequencing-evaluate-genes-of-interest-figure-5-supplement-figure-10.html", "Chapter 6 Shotgun metagenomic sequencing: Evaluate genes of interest (figure 5, supplement figure 10) 6.1 BSH 6.2 Bai operon gene 6.3 Bile acid related bacteria", " Chapter 6 Shotgun metagenomic sequencing: Evaluate genes of interest (figure 5, supplement figure 10) 6.1 BSH 6.1.1 Evaluate BSH abundance at peri-GVHD onset BSH_metalphlan %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% ggplot(aes(x=GI_GVHD, y=log10(cpm+0.55), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(BSH)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 6.1.2 Evaluate BSH abundance at peri-engraftment time point BSH_metalphlan %&gt;% left_join(cohort_BAS) %&gt;% filter(periengr==&quot;Y&quot;) %&gt;% ggplot(aes(x=GI_GVHD, y=log10(cpm+0.05), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(BSH)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 6.2 Bai operon gene 6.2.1 Evaluate correlation of bai operon gene sum and nonUDCA secondary BAs bai_genes_clean %&gt;% distinct(sampleid, bai_operon_sum ) %&gt;% inner_join(both_conc_pools_final) %&gt;% ggplot(aes(x=log(secondary_nonUDCA), y=log(bai_operon_sum+0.05)))+ geom_point(alpha=0.6)+ stat_cor(method=&quot;pearson&quot;)+ geom_smooth(method=&quot;lm&quot;)+ theme_classic()+ ylab(&quot;bai operon log10(cpm)&quot;)+ xlab(&quot;SBAs* log10(pmol/mg)&quot;) 6.2.2 Bai operon gene sum in peri-GVHD onset bai_genes_clean %&gt;% distinct(sampleid, bai_operon_sum ) %&gt;% inner_join(cohort_BAS %&gt;% select(sampleid, GI_GVHD, later, ursodiol) %&gt;% filter(later==&quot;Y&quot;)) %&gt;% ggplot(aes(x=GI_GVHD, y=log(bai_operon_sum+0.01), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5) + ylab(&quot;log10(bai_operon_sum)&quot;) + xlab(&quot;&quot;) + theme_classic() + stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;)) + theme(legend.position=&quot;none&quot;) 6.2.3 Bai operon individual gene abundance bai_genes_clean %&gt;% inner_join(cohort_BAS %&gt;% select(sampleid, GI_GVHD, later) %&gt;% filter(later==&quot;Y&quot;)) %&gt;% ggplot(aes(x=GI_GVHD, y=log(cpm+0.01), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(cpm)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;)+ facet_grid(.~gene) 6.3 Bile acid related bacteria 6.3.1 Eggerthella lenta taxa_bas_later %&gt;% ggplot(aes(x=GI_GVHD, y=log10(eggerthella_lenta+ 1.5e-08), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(Eggerthella lenta)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;N&quot;, &quot;Y&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) 6.3.2 Ruminococcus gnavus taxa_bas_later %&gt;% ggplot(aes(x=GI_GVHD, y=log10(ruminococcus_gnavus+ 1.4e-07), color=GI_GVHD))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(Ruminococcus gnavus)&quot;)+ xlab(&quot;&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;N&quot;, &quot;Y&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;dodgerblue4&quot;, &quot;red3&quot;))+ theme(legend.position=&quot;none&quot;) "],["create-landscape-of-all-peri-gvhd-onset-samples-figure-5.html", "Chapter 7 Create landscape of all peri-GVHD-onset samples (figure 5) 7.1 Define sample order from higher nonUDCA secondary BAs to lower 7.2 GI GVHD plot 7.3 SBA plot 7.4 A-diversity plot 7.5 Bile acid related genes 7.6 Microbiome composition 7.7 Add all plots together", " Chapter 7 Create landscape of all peri-GVHD-onset samples (figure 5) 7.1 Define sample order from higher nonUDCA secondary BAs to lower samples_key&lt;-BSH_metalphlan %&gt;% distinct(sampleid) %&gt;% left_join(later_pools_final %&gt;% select(sampleid, secondary_nonUDCA)) %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) %&gt;% arrange(desc(secondary_nonUDCA)) %&gt;% left_join(ursodiol) %&gt;% filter(ursodiol2==&quot;Y&quot;) level_order &lt;- samples_key$sampleid 7.2 GI GVHD plot gi_gvhd_plot&lt;-cohort_BAS %&gt;% filter(later==&quot;Y&quot;) %&gt;% ggplot((aes(x = factor(sampleid, levels = level_order), y = 1, fill = GI_GVHD))) + geom_raster(color = &quot;black&quot;, size = 0.5) + theme_classic()+ theme(axis.text.x=element_blank())+ xlab(&quot;&quot;)+ ylab(&quot;&quot;)+ scale_fill_manual(values=c(&quot;white&quot;, &quot;dodgerblue4&quot;))+ theme(axis.text.y = element_blank())+ theme(legend.position = &quot;none&quot;) #only for plotting reasons gi_gvhd_plot 7.3 SBA plot sba_plot&lt;-ggplot(samples_key, aes(x=factor(sampleid, level=level_order), y=log10(secondary_nonUDCA)))+ geom_point(size=3)+theme_classic()+ ylab(&quot;log(SBAs*)&quot;)+ theme(axis.text.x=element_blank())+ xlab(&quot;&quot;) sba_plot 7.4 A-diversity plot adiv_pre&lt;-cohort_BAS %&gt;% filter(later==&quot;Y&quot;) %&gt;% left_join(asv_alpha_all) %&gt;% #add a-diversity inner_join(samples_key) %&gt;% arrange(desc(secondary_nonUDCA)) %&gt;% mutate(rank = 1:nrow(.)) adiv_plot&lt;-ggplot(adiv_pre, aes(x = rank, y = simpson_reciprocal)) + geom_point(size=3) + geom_smooth(method = &quot;loess&quot;) + theme_classic() + ylab(&quot;a-diversity&quot;) + #xlab(&quot;sampleid&quot;) + theme(axis.text.x = element_blank()) + xlab(&quot;&quot;) + scale_x_discrete(limits = adiv_pre$rank[order(-adiv_pre$rank)]) adiv_plot 7.5 Bile acid related genes bai_genes_clean$sampleid &lt;-gsub(&quot;FMT_&quot;, &quot;FMT.&quot;, bai_genes_clean$sampleid) ba_genes_pre&lt;-samples_key %&gt;% select(sampleid, GI_GVHD, secondary_nonUDCA) %&gt;% left_join(BSH_metalphlan %&gt;% select(sampleid, cpm, KOID)) %&gt;% rename(gene=KOID) %&gt;% mutate(gene=ifelse(gene==&quot;K01442&quot;, &quot;BSH&quot;, NA)) %&gt;% distinct() %&gt;% spread(key=gene, value=cpm, fill=0) operon_genes_pre&lt;-samples_key %&gt;% left_join(bai_genes_clean) %&gt;% select(sampleid, cpm, gene) %&gt;% distinct() %&gt;% spread(key=gene, value=cpm, fill=0) pre_bai_plot&lt;-ba_genes_pre %&gt;% left_join(operon_genes_pre) %&gt;% select(-GI_GVHD, -secondary_nonUDCA) %&gt;% gather(&quot;gene&quot;, &quot;cpm&quot;, names(.)[2]:names(.)[ncol(.)]) bai_plot&lt;-pre_bai_plot %&gt;% ggplot(aes(x=factor(sampleid, level=level_order), y=gene, fill=log10(cpm+0.05)))+ geom_tile()+ xlab(&quot;&quot;)+ ylab(&quot;bile acid genes&quot;)+ scale_fill_gradient(low=&quot;white&quot;, high=&quot;red&quot;)+ theme(axis.text.x=element_blank())+ theme(legend.position = &quot;none&quot;) #only for plotting reasons bai_plot 7.6 Microbiome composition setDT(asv_annotation_blast_color_ag) asv_color_base_set = unique(asv_annotation_blast_color_ag[,.(color_label_group,color_base)]) color_base_set_asv_carT = asv_color_base_set$color_base names(color_base_set_asv_carT) =asv_color_base_set$color_label_group; gg = ggplot(asv_color_base_set, aes(color_label_group,y=1,fill=color_label_group)) + geom_tile() + scale_fill_manual(values = color_base_set_asv_carT) + theme_classic() + theme(axis.text.x = element_text(angle=60,hjust = 1)) + theme(legend.position = &quot;none&quot;) #color_set_asv_carT maps each distinct taxonomic group to its corresponding color. asv_color_set = unique(asv_annotation_blast_color_ag[,.(color,color_label_group_distinct,color_label_group,color_base)]) color_set_asv_carT = asv_color_set$color names(color_set_asv_carT) =asv_color_set$color_label_group_distinct; setDT(counts_samples) setDT(asv_annotation_blast_color_ag) m = merge(counts_samples[,.(asv_key,sampleid, count,count_relative,count_total)], asv_annotation_blast_color_ag[,.(asv_key,color_label_group_distinct)]); sample_composition &lt;- m %&gt;% left_join(cohort_BAS %&gt;% select(PID, sampleid)) %&gt;% left_join(cohort_BAS) %&gt;% filter(later==&quot;Y&quot;) m1&lt;-sample_composition %&gt;% group_by(sampleid, color_label_group_distinct) %&gt;% inner_join(samples_key) %&gt;% mutate(sampleid = fct_reorder(sampleid, desc(secondary_nonUDCA))) m1$color_label_group_distinct = factor(m1$color_label_group_distinct,levels = sort(unique(m1$color_label_group_distinct),decreasing = T)); gg_composition = ggplot(m1, aes(x=factor(sampleid, levels=level_order), y=count_relative, fill=color_label_group_distinct) ) + geom_bar(stat = &quot;identity&quot;,position=&quot;fill&quot;,width = 1) + theme_classic() + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), legend.position = &quot;none&quot;) + xlab(&quot;&quot;)+ scale_fill_manual(values = color_set_asv_carT); print(gg_composition) 7.7 Add all plots together library(cowplot) last&lt;-plot_grid(gi_gvhd_plot, sba_plot, bai_plot, adiv_plot, gg_composition, #labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), ncol = 1, nrow = 5, align = &quot;v&quot;,axis = &#39;l&#39;, width = 40, height = 20, rel_heights = c(1.8, 4 ,6, 6, 10)) last "],["diversity-bai-operon-and-domination.html", "Chapter 8 Diversity, bai operon and domination 8.1 Evaluate correlation of a-diversity and bai operon sum 8.2 Identify patients with monodomination by 16S 8.3 Domination and a-diversity 8.4 Domination and bai operon 8.5 SBAs and domination", " Chapter 8 Diversity, bai operon and domination 8.1 Evaluate correlation of a-diversity and bai operon sum data_ba&lt;- asv_alpha_all %&gt;% inner_join(bai_genes_clean %&gt;% distinct(sampleid, bai_operon_sum)) %&gt;% left_join(cohort_BAS) %&gt;% filter(ursodiol==&quot;Y&quot;) data_ba %&gt;% ggplot(aes(x=log10(simpson_reciprocal), y=log10(bai_operon_sum+0.01)))+ geom_point(alpha=0.6)+ stat_cor(method=&quot;pearson&quot;)+ geom_smooth(method=&quot;lm&quot;)+ theme_classic()+ ylab(&quot;bai operon log10(cpm)&quot;)+ xlab(&quot;a-diversity&quot;) 8.2 Identify patients with monodomination by 16S #create dataset with asv samples_asv&lt;-cohort_BAS %&gt;% filter(later==&quot;Y&quot;) %&gt;% select(sampleid) %&gt;% inner_join(counts_samples %&gt;% select(sampleid, asv_key, count, count_total)) %&gt;% inner_join(asv_annotation_blast_ag %&gt;% select(asv_key, kingdom, phylum, class, ordr, family, genus)) %&gt;% mutate(relab=count/count_total) %&gt;% group_by(sampleid, genus) pathogens_pre&lt;- samples_asv %&gt;% filter(genus==&quot;Enterococcus&quot;|genus==&quot;Streptococcus&quot;|phylum==&quot;Proteobacteria&quot;) %&gt;% mutate(enterococcus=ifelse(genus==&quot;Enterococcus&quot;, relab, 0)) %&gt;% mutate(streptococcus=ifelse(genus==&quot;Streptococcus&quot;, relab, 0)) %&gt;% mutate(proteobacteria=ifelse(phylum==&quot;Proteobacteria&quot;, relab, 0)) %&gt;% mutate(enterococcus_dom=ifelse(enterococcus&gt;=0.3, &quot;Y&quot;, &quot;N&quot;)) %&gt;% mutate(streptococcus_dom=ifelse(streptococcus&gt;=0.3, &quot;Y&quot;, &quot;N&quot;)) %&gt;% mutate(proteobacteria_dom=ifelse(proteobacteria&gt;=0.3, &quot;Y&quot;, &quot;N&quot;)) %&gt;% mutate(any_dom=ifelse(enterococcus_dom==&quot;Y&quot;|streptococcus_dom==&quot;Y&quot;|proteobacteria_dom==&quot;Y&quot;, &quot;Y&quot;, &quot;N&quot;)) %&gt;% group_by(sampleid) %&gt;% arrange(desc(any_dom)) %&gt;% slice(1) 8.3 Domination and a-diversity pathogens_pre %&gt;% inner_join(asv_alpha_all) %&gt;% ggplot(aes(x=any_dom, y=simpson_reciprocal, color=any_dom))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(a-div)&quot;)+ xlab(&quot;domination&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;turquoise4&quot;,&quot;darkviolet&quot;))+ theme(legend.position=&quot;none&quot;) 8.4 Domination and bai operon pathogens_pre %&gt;% inner_join(bai_genes_clean %&gt;% distinct(sampleid, bai_operon_sum)) %&gt;% ggplot(aes(x=any_dom, y=log10(bai_operon_sum+0.01), color=any_dom))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(bai sum)&quot;)+ xlab(&quot;domination&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;turquoise4&quot;,&quot;darkviolet&quot;))+ theme(legend.position=&quot;none&quot;) 8.5 SBAs and domination pathogens_pre %&gt;% inner_join(later_pools_final) %&gt;% ggplot(aes(x=any_dom, y=log10(secondary_nonUDCA), color=any_dom))+ geom_boxplot(width=0.2, lwd=0.8, outlier.shape = NA) + geom_jitter(width=0.3, alpha=0.3, size=2.5)+ ylab(&quot;log10(SBAs*)&quot;)+ xlab(&quot;domination&quot;)+ theme_classic()+ stat_compare_means(comparisons=list(c(&quot;Y&quot;, &quot;N&quot;)), method=&quot;wilcox.test&quot;, correct=FALSE)+ scale_color_manual(values=c(&quot;turquoise4&quot;,&quot;darkviolet&quot;))+ theme(legend.position=&quot;none&quot;) "],["evaluation-of-udca-exposure-and-clinical-outcomes-teng-fei.html", "Chapter 9 Evaluation of UDCA exposure and clinical outcomes: Teng Fei 9.1 Prepare the patient outcome table 9.2 Evaluate ursodiol exposure and overall survival 9.3 Evaluation of cumulative incidences", " Chapter 9 Evaluation of UDCA exposure and clinical outcomes: Teng Fei 9.1 Prepare the patient outcome table library(tidycmprsk) library(ggsurvfit) library(tidycmprsk) library(gtsummary) patients_urso_CIF2&lt;-patients_urso_CIF %&gt;% mutate(GRM_mortality=ifelse(death==F &amp; relapse==F &amp; pod==&quot;N&quot;, 0, ifelse(relapse==T | pod ==&quot;Y&quot; | (cod==&quot;Disease Progression&quot;|cod==&quot;Recurrence of primary disease&quot;|cod==&quot;Malignant disease&quot;|cod==&quot;Relapse&quot;),2, ifelse(cod==&quot;GvHD&quot;|cod==&quot;GvHD/Infection&quot;|(gvhd==T &amp; death==T),1,3)))) %&gt;% mutate(GRM_mortality = ifelse(is.na(GRM_mortality),3,GRM_mortality)) %&gt;% mutate(GRM_mortality = factor(GRM_mortality,levels=c(0,1,2,3),labels=c(&quot;Censored&quot;, &quot;GRM&quot;, &quot;Relapse/PoD&quot;,&quot;Other&quot;))) %&gt;% mutate(TRM_mortality=ifelse(death==F &amp; relapse==F &amp; pod==&quot;N&quot;, 0, ifelse(relapse==T | pod ==&quot;Y&quot; | (cod==&quot;Disease Progression&quot;|cod==&quot;Recurrence of primary disease&quot;|cod==&quot;Malignant disease&quot;|cod==&quot;Relapse&quot;),2, 1))) %&gt;% mutate(TRM_mortality = ifelse(is.na(TRM_mortality),1,TRM_mortality)) %&gt;% mutate(TRM_mortality = factor(TRM_mortality,levels=c(0,1,2),labels=c(&quot;Censored&quot;,&quot;TRM&quot;,&quot;Relapse/PoD&quot;))) table(patients_urso_CIF2$GRM_mortality) ## ## Censored GRM Relapse/PoD Other ## 624 191 386 100 patients_urso_CIF2$GRM_time &lt;- patients_urso_CIF2$OS patients_urso_CIF2$GRM_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;N&quot;] = patients_urso_CIF2$relapse_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;N&quot;] patients_urso_CIF2$GRM_time[patients_urso_CIF2$relapse==F &amp; patients_urso_CIF2$pod==&quot;Y&quot;] = patients_urso_CIF2$pod_time[patients_urso_CIF2$relapse==F &amp; patients_urso_CIF2$pod==&quot;Y&quot;] patients_urso_CIF2$GRM_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;] = min(patients_urso_CIF2$pod_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;], patients_urso_CIF2$relapse_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;]) patients_urso_CIF2$TRM_time &lt;- patients_urso_CIF2$OS patients_urso_CIF2$TRM_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;N&quot;] = patients_urso_CIF2$relapse_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;N&quot;] patients_urso_CIF2$TRM_time[patients_urso_CIF2$relapse==F &amp; patients_urso_CIF2$pod==&quot;Y&quot;] = patients_urso_CIF2$pod_time[patients_urso_CIF2$relapse==F &amp; patients_urso_CIF2$pod==&quot;Y&quot;] patients_urso_CIF2$TRM_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;] = min(patients_urso_CIF2$pod_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;], patients_urso_CIF2$relapse_time[patients_urso_CIF2$relapse==T &amp; patients_urso_CIF2$pod==&quot;Y&quot;]) patients_urso_CIF2 &lt;- patients_urso_CIF2 %&gt;% mutate(GRM_mortality_2yr = ifelse(GRM_time &gt; 24,1,GRM_mortality), GRM_time_2yr = ifelse(GRM_time &gt; 24,24,GRM_time), TRM_mortality_2yr = ifelse(TRM_time &gt; 24,1,TRM_mortality), TRM_time_2yr = ifelse(TRM_time &gt; 24,24,TRM_time), death_2yr = ifelse(OS &gt; 24,FALSE,death), OS_2yr = ifelse(OS &gt; 24,24,OS), GRM_mortality_2yr = factor(GRM_mortality_2yr,levels=1:4,labels=c(&quot;Censored&quot;,&quot;GRM&quot;,&quot;Relapse/PoD&quot;, &quot;Other&quot;)), TRM_mortality_2yr = factor(TRM_mortality_2yr,levels=1:3,labels=c(&quot;Censored&quot;, &quot;TRM&quot;, &quot;Relapse/PoD&quot;))) patients_urso_CIF2 &lt;- patients_urso_CIF2 %&gt;% mutate(donor_new=ifelse(donor_match==&quot;MMRD&quot;, &quot;haplo&quot;, donor_match)) 9.2 Evaluate ursodiol exposure and overall survival 9.2.1 Univariable analysis KM.OS &lt;- survfit2(Surv(OS_2yr,as.numeric(death_2yr))~ursodiol2,data=patients_urso_CIF2) KM.OS %&gt;% ggsurvfit() + add_censor_mark() + add_confidence_interval() + add_risktable(times=c(0,6, 12, 18, 24)) 9.2.2 Multivariable analysis coxfit &lt;- survival::coxph(Surv(OS_2yr,as.numeric(death_2yr))~age+sex+donor_match+graft+intensity+ursodiol2,data=patients_urso_CIF2) coxfit %&gt;% tbl_regression(exponentiate=TRUE) %&gt;% bold_p() #ediqtakrcn table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ediqtakrcn thead, #ediqtakrcn tbody, #ediqtakrcn tfoot, #ediqtakrcn tr, #ediqtakrcn td, #ediqtakrcn th { border-style: none; } #ediqtakrcn p { margin: 0; padding: 0; } #ediqtakrcn .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ediqtakrcn .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ediqtakrcn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ediqtakrcn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ediqtakrcn .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ediqtakrcn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ediqtakrcn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ediqtakrcn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ediqtakrcn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ediqtakrcn .gt_column_spanner_outer:first-child { padding-left: 0; } #ediqtakrcn .gt_column_spanner_outer:last-child { padding-right: 0; } #ediqtakrcn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ediqtakrcn .gt_spanner_row { border-bottom-style: hidden; } #ediqtakrcn .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ediqtakrcn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ediqtakrcn .gt_from_md > :first-child { margin-top: 0; } #ediqtakrcn .gt_from_md > :last-child { margin-bottom: 0; } #ediqtakrcn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ediqtakrcn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ediqtakrcn .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ediqtakrcn .gt_row_group_first td { border-top-width: 2px; } #ediqtakrcn .gt_row_group_first th { border-top-width: 2px; } #ediqtakrcn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ediqtakrcn .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ediqtakrcn .gt_first_summary_row.thick { border-top-width: 2px; } #ediqtakrcn .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ediqtakrcn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ediqtakrcn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ediqtakrcn .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ediqtakrcn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ediqtakrcn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ediqtakrcn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ediqtakrcn .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ediqtakrcn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ediqtakrcn .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ediqtakrcn .gt_left { text-align: left; } #ediqtakrcn .gt_center { text-align: center; } #ediqtakrcn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ediqtakrcn .gt_font_normal { font-weight: normal; } #ediqtakrcn .gt_font_bold { font-weight: bold; } #ediqtakrcn .gt_font_italic { font-style: italic; } #ediqtakrcn .gt_super { font-size: 65%; } #ediqtakrcn .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ediqtakrcn .gt_asterisk { font-size: 100%; vertical-align: 0; } #ediqtakrcn .gt_indent_1 { text-indent: 5px; } #ediqtakrcn .gt_indent_2 { text-indent: 10px; } #ediqtakrcn .gt_indent_3 { text-indent: 15px; } #ediqtakrcn .gt_indent_4 { text-indent: 20px; } #ediqtakrcn .gt_indent_5 { text-indent: 25px; } Characteristic HR1 95% CI1 p-value age 1.03 1.02, 1.04 sex     F — —     M 0.95 0.79, 1.15 0.6 donor_match     haplo — —     haplo/MMUD 1.20 0.57, 2.51 0.6     MMRD 1.23 0.16, 9.28 0.8     MMUD 1.23 0.73, 2.07 0.4     MRD 0.74 0.45, 1.21 0.2     MUD 0.82 0.51, 1.32 0.4 graft     BM — —     CD34 0.89 0.60, 1.33 0.6     PBSC 1.15 0.80, 1.67 0.5     UCB 0.75 0.44, 1.28 0.3 intensity     Ablative — —     Nonablative 0.49 0.33, 0.73     Reduced Intensity 1.00 0.74, 1.35 >0.9 ursodiol2     N — —     Y 0.69 0.55, 0.85 1 HR = Hazard Ratio, CI = Confidence Interval 9.3 Evaluation of cumulative incidences 9.3.1 Cumulative incidence of GVHD-related mortality gray.test.GRM &lt;- cuminc(Surv(GRM_time_2yr, GRM_mortality_2yr)~ursodiol2, data=patients_urso_CIF2) gray.test.GRM %&gt;% tbl_cuminc(times= c(6,12,18,24),outcome=&quot;GRM&quot;) %&gt;% add_p() %&gt;% add_n() %&gt;% modify_caption(&quot;Outcome: GRM&quot;) #uobopexhmg table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #uobopexhmg thead, #uobopexhmg tbody, #uobopexhmg tfoot, #uobopexhmg tr, #uobopexhmg td, #uobopexhmg th { border-style: none; } #uobopexhmg p { margin: 0; padding: 0; } #uobopexhmg .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #uobopexhmg .gt_caption { padding-top: 4px; padding-bottom: 4px; } #uobopexhmg .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #uobopexhmg .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #uobopexhmg .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uobopexhmg .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uobopexhmg .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #uobopexhmg .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #uobopexhmg .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #uobopexhmg .gt_column_spanner_outer:first-child { padding-left: 0; } #uobopexhmg .gt_column_spanner_outer:last-child { padding-right: 0; } #uobopexhmg .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #uobopexhmg .gt_spanner_row { border-bottom-style: hidden; } #uobopexhmg .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #uobopexhmg .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #uobopexhmg .gt_from_md > :first-child { margin-top: 0; } #uobopexhmg .gt_from_md > :last-child { margin-bottom: 0; } #uobopexhmg .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #uobopexhmg .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #uobopexhmg .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #uobopexhmg .gt_row_group_first td { border-top-width: 2px; } #uobopexhmg .gt_row_group_first th { border-top-width: 2px; } #uobopexhmg .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uobopexhmg .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #uobopexhmg .gt_first_summary_row.thick { border-top-width: 2px; } #uobopexhmg .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uobopexhmg .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #uobopexhmg .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #uobopexhmg .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #uobopexhmg .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #uobopexhmg .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #uobopexhmg .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uobopexhmg .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #uobopexhmg .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #uobopexhmg .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #uobopexhmg .gt_left { text-align: left; } #uobopexhmg .gt_center { text-align: center; } #uobopexhmg .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #uobopexhmg .gt_font_normal { font-weight: normal; } #uobopexhmg .gt_font_bold { font-weight: bold; } #uobopexhmg .gt_font_italic { font-style: italic; } #uobopexhmg .gt_super { font-size: 65%; } #uobopexhmg .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #uobopexhmg .gt_asterisk { font-size: 100%; vertical-align: 0; } #uobopexhmg .gt_indent_1 { text-indent: 5px; } #uobopexhmg .gt_indent_2 { text-indent: 10px; } #uobopexhmg .gt_indent_3 { text-indent: 15px; } #uobopexhmg .gt_indent_4 { text-indent: 20px; } #uobopexhmg .gt_indent_5 { text-indent: 25px; } Table 9.1: Outcome: GRM Characteristic N Time 6 Time 12 Time 18 Time 24 p-value1 ursodiol2 1,301 0.044     N 7.2% (4.7%, 10%) 11% (7.8%, 15%) 14% (10%, 18%) 16% (12%, 20%)     Y 3.8% (2.7%, 5.1%) 8.1% (6.5%, 9.9%) 10% (8.2%, 12%) 12% (9.8%, 14%) 1 Gray’s Test gray.test.GRM %&gt;% ggcuminc(outcome=&quot;GRM&quot;) + labs( x = &quot;Months after HCT&quot;, y = &quot;Cumulative Incidence (GRM)&quot; ) + add_confidence_interval() + add_risktable(times=c(0,6,12,18,24)) 9.3.2 Cumulative incidence of Relapse/progression of disease gray.test.GRM %&gt;% tbl_cuminc(times= c(6,12,18,24),outcome=&quot;Relapse/PoD&quot;) %&gt;% add_p() %&gt;% add_n() %&gt;% modify_caption(&quot;Outcome: Relapse/PoD&quot;) #ghaubvjtkh table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #ghaubvjtkh thead, #ghaubvjtkh tbody, #ghaubvjtkh tfoot, #ghaubvjtkh tr, #ghaubvjtkh td, #ghaubvjtkh th { border-style: none; } #ghaubvjtkh p { margin: 0; padding: 0; } #ghaubvjtkh .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ghaubvjtkh .gt_caption { padding-top: 4px; padding-bottom: 4px; } #ghaubvjtkh .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ghaubvjtkh .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #ghaubvjtkh .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ghaubvjtkh .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghaubvjtkh .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ghaubvjtkh .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ghaubvjtkh .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ghaubvjtkh .gt_column_spanner_outer:first-child { padding-left: 0; } #ghaubvjtkh .gt_column_spanner_outer:last-child { padding-right: 0; } #ghaubvjtkh .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #ghaubvjtkh .gt_spanner_row { border-bottom-style: hidden; } #ghaubvjtkh .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #ghaubvjtkh .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ghaubvjtkh .gt_from_md > :first-child { margin-top: 0; } #ghaubvjtkh .gt_from_md > :last-child { margin-bottom: 0; } #ghaubvjtkh .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ghaubvjtkh .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #ghaubvjtkh .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #ghaubvjtkh .gt_row_group_first td { border-top-width: 2px; } #ghaubvjtkh .gt_row_group_first th { border-top-width: 2px; } #ghaubvjtkh .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ghaubvjtkh .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #ghaubvjtkh .gt_first_summary_row.thick { border-top-width: 2px; } #ghaubvjtkh .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghaubvjtkh .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ghaubvjtkh .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ghaubvjtkh .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #ghaubvjtkh .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ghaubvjtkh .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ghaubvjtkh .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ghaubvjtkh .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ghaubvjtkh .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ghaubvjtkh .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #ghaubvjtkh .gt_left { text-align: left; } #ghaubvjtkh .gt_center { text-align: center; } #ghaubvjtkh .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ghaubvjtkh .gt_font_normal { font-weight: normal; } #ghaubvjtkh .gt_font_bold { font-weight: bold; } #ghaubvjtkh .gt_font_italic { font-style: italic; } #ghaubvjtkh .gt_super { font-size: 65%; } #ghaubvjtkh .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #ghaubvjtkh .gt_asterisk { font-size: 100%; vertical-align: 0; } #ghaubvjtkh .gt_indent_1 { text-indent: 5px; } #ghaubvjtkh .gt_indent_2 { text-indent: 10px; } #ghaubvjtkh .gt_indent_3 { text-indent: 15px; } #ghaubvjtkh .gt_indent_4 { text-indent: 20px; } #ghaubvjtkh .gt_indent_5 { text-indent: 25px; } Table 9.2: Outcome: Relapse/PoD Characteristic N Time 6 Time 12 Time 18 Time 24 p-value1 ursodiol2 1,301 0.088     N 12% (8.9%, 16%) 18% (14%, 23%) 22% (17%, 26%) 23% (18%, 28%)     Y 15% (13%, 17%) 24% (21%, 26%) 26% (24%, 29%) 28% (25%, 31%) 1 Gray’s Test 9.3.3 Cumulative incidence of mortality non-related to GVHD or relapse/progression of disease gray.test.GRM %&gt;% tbl_cuminc(times= c(6,12,18,24),outcome=&quot;Other&quot;) %&gt;% add_p() %&gt;% add_n() %&gt;% modify_caption(&quot;Outcome: Other&quot;) #pdfhrknlpl table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #pdfhrknlpl thead, #pdfhrknlpl tbody, #pdfhrknlpl tfoot, #pdfhrknlpl tr, #pdfhrknlpl td, #pdfhrknlpl th { border-style: none; } #pdfhrknlpl p { margin: 0; padding: 0; } #pdfhrknlpl .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pdfhrknlpl .gt_caption { padding-top: 4px; padding-bottom: 4px; } #pdfhrknlpl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pdfhrknlpl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #pdfhrknlpl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pdfhrknlpl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pdfhrknlpl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pdfhrknlpl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pdfhrknlpl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pdfhrknlpl .gt_column_spanner_outer:first-child { padding-left: 0; } #pdfhrknlpl .gt_column_spanner_outer:last-child { padding-right: 0; } #pdfhrknlpl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #pdfhrknlpl .gt_spanner_row { border-bottom-style: hidden; } #pdfhrknlpl .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #pdfhrknlpl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pdfhrknlpl .gt_from_md > :first-child { margin-top: 0; } #pdfhrknlpl .gt_from_md > :last-child { margin-bottom: 0; } #pdfhrknlpl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pdfhrknlpl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #pdfhrknlpl .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #pdfhrknlpl .gt_row_group_first td { border-top-width: 2px; } #pdfhrknlpl .gt_row_group_first th { border-top-width: 2px; } #pdfhrknlpl .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pdfhrknlpl .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #pdfhrknlpl .gt_first_summary_row.thick { border-top-width: 2px; } #pdfhrknlpl .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pdfhrknlpl .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pdfhrknlpl .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pdfhrknlpl .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #pdfhrknlpl .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pdfhrknlpl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pdfhrknlpl .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pdfhrknlpl .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pdfhrknlpl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pdfhrknlpl .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #pdfhrknlpl .gt_left { text-align: left; } #pdfhrknlpl .gt_center { text-align: center; } #pdfhrknlpl .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pdfhrknlpl .gt_font_normal { font-weight: normal; } #pdfhrknlpl .gt_font_bold { font-weight: bold; } #pdfhrknlpl .gt_font_italic { font-style: italic; } #pdfhrknlpl .gt_super { font-size: 65%; } #pdfhrknlpl .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #pdfhrknlpl .gt_asterisk { font-size: 100%; vertical-align: 0; } #pdfhrknlpl .gt_indent_1 { text-indent: 5px; } #pdfhrknlpl .gt_indent_2 { text-indent: 10px; } #pdfhrknlpl .gt_indent_3 { text-indent: 15px; } #pdfhrknlpl .gt_indent_4 { text-indent: 20px; } #pdfhrknlpl .gt_indent_5 { text-indent: 25px; } Table 9.3: Outcome: Other Characteristic N Time 6 Time 12 Time 18 Time 24 p-value1 ursodiol2 1,301 0.003     N 4.7% (2.7%, 7.4%) 7.2% (4.7%, 10%) 8.8% (6.0%, 12%) 11% (7.6%, 14%)     Y 4.1% (3.0%, 5.4%) 5.0% (3.8%, 6.5%) 5.4% (4.1%, 7.0%) 5.6% (4.3%, 7.2%) 1 Gray’s Test 9.3.4 Multivariable analysis of GVHD-related mortality fgmodel.GRM &lt;- crr(Surv(GRM_time_2yr,GRM_mortality_2yr)~age+sex+donor_match+graft+intensity+ursodiol2,data=patients_urso_CIF2) fgmodel.GRM %&gt;% tbl_regression(exponentiate=TRUE) %&gt;% bold_p() #cjoktcsrma table { font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } #cjoktcsrma thead, #cjoktcsrma tbody, #cjoktcsrma tfoot, #cjoktcsrma tr, #cjoktcsrma td, #cjoktcsrma th { border-style: none; } #cjoktcsrma p { margin: 0; padding: 0; } #cjoktcsrma .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #cjoktcsrma .gt_caption { padding-top: 4px; padding-bottom: 4px; } #cjoktcsrma .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #cjoktcsrma .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; } #cjoktcsrma .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cjoktcsrma .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjoktcsrma .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #cjoktcsrma .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #cjoktcsrma .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #cjoktcsrma .gt_column_spanner_outer:first-child { padding-left: 0; } #cjoktcsrma .gt_column_spanner_outer:last-child { padding-right: 0; } #cjoktcsrma .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 5px; overflow-x: hidden; display: inline-block; width: 100%; } #cjoktcsrma .gt_spanner_row { border-bottom-style: hidden; } #cjoktcsrma .gt_group_heading { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; text-align: left; } #cjoktcsrma .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #cjoktcsrma .gt_from_md > :first-child { margin-top: 0; } #cjoktcsrma .gt_from_md > :last-child { margin-bottom: 0; } #cjoktcsrma .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #cjoktcsrma .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; } #cjoktcsrma .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; } #cjoktcsrma .gt_row_group_first td { border-top-width: 2px; } #cjoktcsrma .gt_row_group_first th { border-top-width: 2px; } #cjoktcsrma .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cjoktcsrma .gt_first_summary_row { border-top-style: solid; border-top-color: #D3D3D3; } #cjoktcsrma .gt_first_summary_row.thick { border-top-width: 2px; } #cjoktcsrma .gt_last_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjoktcsrma .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #cjoktcsrma .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #cjoktcsrma .gt_last_grand_summary_row_top { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-bottom-style: double; border-bottom-width: 6px; border-bottom-color: #D3D3D3; } #cjoktcsrma .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #cjoktcsrma .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #cjoktcsrma .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cjoktcsrma .gt_footnote { margin: 0px; font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cjoktcsrma .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #cjoktcsrma .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; } #cjoktcsrma .gt_left { text-align: left; } #cjoktcsrma .gt_center { text-align: center; } #cjoktcsrma .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #cjoktcsrma .gt_font_normal { font-weight: normal; } #cjoktcsrma .gt_font_bold { font-weight: bold; } #cjoktcsrma .gt_font_italic { font-style: italic; } #cjoktcsrma .gt_super { font-size: 65%; } #cjoktcsrma .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; } #cjoktcsrma .gt_asterisk { font-size: 100%; vertical-align: 0; } #cjoktcsrma .gt_indent_1 { text-indent: 5px; } #cjoktcsrma .gt_indent_2 { text-indent: 10px; } #cjoktcsrma .gt_indent_3 { text-indent: 15px; } #cjoktcsrma .gt_indent_4 { text-indent: 20px; } #cjoktcsrma .gt_indent_5 { text-indent: 25px; } Characteristic HR1 95% CI1 p-value age 1.02 1.01, 1.04 0.002 sex     F — —     M 0.77 0.56, 1.05 0.10 donor_match     haplo — —     haplo/MMUD 1.78 0.57, 5.59 0.3     MMRD 0.00 0.00, 0.00     MMUD 1.52 0.65, 3.58 0.3     MRD 0.58 0.26, 1.28 0.2     MUD 0.74 0.35, 1.59 0.4 graft     BM — —     CD34 1.28 0.59, 2.79 0.5     PBSC 1.64 0.85, 3.16 0.14     UCB 0.88 0.36, 2.19 0.8 intensity     Ablative — —     Nonablative 0.95 0.53, 1.71 0.9     Reduced Intensity 1.25 0.75, 2.09 0.4 ursodiol2     N — —     Y 0.66 0.46, 0.94 0.022 1 HR = Hazard Ratio, CI = Confidence Interval "],["scrna-seq-data-anastasia-kousa.html", "Chapter 10 scRNA seq Data: Anastasia Kousa 10.1 GSEA RESULTS 10.2 FOLD CHANGE vs FOLD CHANGE", " Chapter 10 scRNA seq Data: Anastasia Kousa # check enviroment status #renv::status() #renv::snapshot() #renv::restore() #install required packages # if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) # install.packages(&quot;BiocManager&quot;) # renv::install(&quot;bioc::BiocManager&quot;, force=T) # if (!require(&quot;BiocManager&quot;, quietly = TRUE)) # install.packages(&quot;BiocManager&quot;) #BiocManager::install(&quot;biomaRt&quot;, force=T) # renv::install(&quot;bioc::edgeR&quot;, force=T) #renv::install(&quot;bioc::png&quot;, force=T) #renv::install(&quot;tibble@3.1.8&quot;, force=T) # renv::install(&quot;ggpubr&quot;, force=T) # renv::install(&quot;pheatmap&quot;, force=T) # renv::install(&quot;dichromat&quot;, force=T) # renv::install(&quot;grid&quot;, force=T) # renv::install(&quot;patchwork&quot;, force=T) # load required packages library(biomaRt) library(edgeR) ## Loading required package: limma library(tibble) library(ggpubr) library(pheatmap) library(dichromat) library(grid) library(patchwork) ## ## Attaching package: &#39;patchwork&#39; ## The following object is masked from &#39;package:cowplot&#39;: ## ## align_plots library(BiocManager) library(stats) library(readxl) library(dplyr) 10.1 GSEA RESULTS setwd(&quot;/Volumes/Macintosh HD/Users/miltiado/Documents/BA/Anastasia/gsea/&quot;) # store gsea file paths gsea_result_files &lt;- list.files(recursive = TRUE, pattern = &quot;^gsea_report(.*)tsv$&quot;) # create annotation fields celltype_annotation = rep(c(&quot;CD4&quot;, &quot;CD8&quot;, &quot;Treg&quot;),8) treatment_annotation= rep(c(rep(&quot;CDCA&quot;,3), rep(&quot;UDCA&quot;,3), rep(&quot;GW4064&quot;,3), rep(&quot;DY268&quot;,3)),2) # initiate counter i=1 # create empty tibble to store the GSEA data all_gsea_results = tibble(&quot;GS PATHWAY&quot;=factor(), &quot;GS DETAILS&quot;=integer(), &quot;SIZE&quot;=double(), &quot;ES&quot;=double(), &quot;NES&quot;=double(), &quot;NOM p-val&quot;=double(), &quot;FDR q-val&quot;=double(), &quot;FWER p-val&quot;=double(), &quot;RANK&quot;=integer(), &quot;LEADING EDGE&quot;=factor(), &quot;CELLTYPE&quot; = factor(), &quot;TREATMENT&quot; = factor()) # fill in tibble with all GSEA results for (path in gsea_result_files){ gsea_results = tibble(read.table(path, sep=&quot;\\t&quot;, row.names = 1, skip = 1)) colnames(gsea_results) = c(&quot;GS PATHWAY&quot;, &quot;GS DETAILS&quot;, &quot;SIZE&quot;, &quot;ES&quot;, &quot;NES&quot;, &quot;NOM p-val&quot;, &quot;FDR q-val&quot;, &quot;FWER p-val&quot;, &quot;RANK&quot;, &quot;LEADING EDGE&quot;, &quot;CELLTYPE&quot;, &quot;TREATMENT&quot;) gsea_results$CELLTYPE = rep(as.factor(celltype_annotation[i]), nrow(gsea_results)) gsea_results$TREATMENT = rep(as.factor(treatment_annotation[i]), nrow(gsea_results)) all_gsea_results = rbind(all_gsea_results, gsea_results) i=i+1 } # remove &quot;---&quot; rows all_gsea_results = all_gsea_results[all_gsea_results$NES!=&quot;---&quot;,] # convert NES to double all_gsea_results$NES = as.double(all_gsea_results$NES) # convert FDR to -log10 all_gsea_results$`-10log(FDR q-val)` = -log(as.double(all_gsea_results$`FDR q-val`)+0.00001,10) all_gsea_results$trFDR = all_gsea_results$`-10log(FDR q-val)` # plot GSEA results in a dotplot facet by cell type and treatment ggdotchart(all_gsea_results[(all_gsea_results$`FDR q-val`&lt;=0.05) ,], &#39;GS PATHWAY&#39;, &#39;NES&#39;, shape=19, sorting = &quot;ascending&quot;, add = &quot;segments&quot;, color= &#39;NES&#39;, rotate=TRUE, dot.size=&#39;trFDR&#39;, ggtheme = theme_pubr()) + facet_grid(CELLTYPE~TREATMENT) + scale_colour_gradientn(colours = dichromat::colorschemes$DarkRedtoBlue.12) + geom_hline(yintercept = 0, linetype = 2, color = &quot;lightgray&quot;) + ylim(-3,3) + font(&quot;xy.text&quot;, size=5) 10.2 FOLD CHANGE vs FOLD CHANGE # set path to DEG results (treatment vs vehicle) setwd(&quot;/Users/miltiado/Documents/BA/Anastasia/results/&quot;) # read in all available excel sheet names wilcox_results = excel_sheets(&#39;in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;) # in the remaining code sections we read in combinations of DEG results, combine them in a joined tibble, annotate significant genes in either comparison or in both and create an assorted scatterplot with the pearson correlation coefficient and statistic # CDCA vs GW4064 # CD4 for (item in &#39;2.CDCA(100nM) CD4&#39;) { CDCA &lt;- read_excel(&#39;/Volumes/Macintosh HD/Users/miltiado/Documents/BA/Anastasia/results/in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } for (item in &#39;3.GW4064(1uM) CD4&#39;) { GW4064 &lt;- read_excel(&#39;/Volumes/Macintosh HD/Users/miltiado/Documents/BA/Anastasia/results/in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } CDCA_GW4064 = full_join( CDCA, GW4064, by=c(&#39;2.CDCA(100nM) CD4_n&#39;=&#39;3.GW4064(1uM) CD4_n&#39;)) CDCA_GW4064 &lt;- CDCA_GW4064 %&gt;% mutate(annotation = case_when(CDCA_GW4064$`2.CDCA(100nM) CD4_p`&lt;=0.05 &amp; CDCA_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;red&#39;, CDCA_GW4064$`2.CDCA(100nM) CD4_p`&lt;=0.05 &amp; CDCA_GW4064$`3.GW4064(1uM) CD4_p`&gt;0.05 ~ &#39;green3&#39;, CDCA_GW4064$`2.CDCA(100nM) CD4_p`&gt;0.05 &amp; CDCA_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;blue&#39;, CDCA_GW4064$`2.CDCA(100nM) CD4_p`&gt;0.05 &amp; CDCA_GW4064$`3.GW4064(1uM) CD4_p`&gt;=0.05 ~ &#39;grey80&#39;)) ggplot(CDCA_GW4064[CDCA_GW4064$annotation!=&#39;grey80&#39;,], aes(x = `2.CDCA(100nM) CD4_s`, y = `3.GW4064(1uM) CD4_s`)) + geom_point(size = 5, color = CDCA_GW4064[CDCA_GW4064$annotation!=&#39;grey80&#39;,]$annotation, alpha=0.7) + geom_rug() + theme_pubr() + stat_smooth(method = &quot;lm&quot;, formula = y ~ x, col=&#39;black&#39;, geom = &quot;smooth&quot;) + stat_cor(method=&quot;pearson&quot;) # UDCA vs GW4064 # CD4 for (item in &#39;4.UDCA(100nM) CD4&#39;) { UDCA &lt;- read_excel(&#39;in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } for (item in &#39;3.GW4064(1uM) CD4&#39;) { GW4064 &lt;- read_excel(&#39;in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } UDCA_GW4064 = full_join( UDCA, GW4064, by=c(&#39;4.UDCA(100nM) CD4_n&#39;=&#39;3.GW4064(1uM) CD4_n&#39;)) UDCA_GW4064 &lt;- UDCA_GW4064 %&gt;% mutate(annotation = case_when(UDCA_GW4064$`4.UDCA(100nM) CD4_p`&lt;=0.05 &amp; UDCA_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;red&#39;, UDCA_GW4064$`4.UDCA(100nM) CD4_p`&lt;=0.05 &amp; UDCA_GW4064$`3.GW4064(1uM) CD4_p`&gt;0.05 ~ &#39;green3&#39;, UDCA_GW4064$`4.UDCA(100nM) CD4_p`&gt;0.05 &amp; UDCA_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;blue&#39;, UDCA_GW4064$`4.UDCA(100nM) CD4_p`&gt;0.05 &amp; UDCA_GW4064$`3.GW4064(1uM) CD4_p`&gt;=0.05 ~ &#39;grey80&#39;)) ggplot(UDCA_GW4064[UDCA_GW4064$annotation!=&#39;grey80&#39;,], aes(x = `4.UDCA(100nM) CD4_s`, y = `3.GW4064(1uM) CD4_s`)) + geom_point(size = 5, color = UDCA_GW4064[UDCA_GW4064$annotation!=&#39;grey80&#39;,]$annotation, alpha=0.7) + geom_rug() + theme_pubr() + stat_smooth(method = &quot;lm&quot;, formula = y ~ x, col=&#39;black&#39;, geom = &quot;smooth&quot;) + stat_cor(method=&quot;pearson&quot;) # DY268 vs GW4064 # CD4 for (item in &#39;5.DY268(1uM) CD4&#39;) { DY268 &lt;- read_excel(&#39;in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } for (item in &#39;3.GW4064(1uM) CD4&#39;) { GW4064 &lt;- read_excel(&#39;in-vitro_human_cell_lines_CD4_wilcox.xlsx&#39;, sheet = item) } DY268_GW4064 = full_join(DY268, GW4064, by=c(&#39;5.DY268(1uM) CD4_n&#39;=&#39;3.GW4064(1uM) CD4_n&#39;)) DY268_GW4064 &lt;- DY268_GW4064 %&gt;% mutate(annotation = case_when(DY268_GW4064$`5.DY268(1uM) CD4_p`&lt;=0.05 &amp; DY268_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;red&#39;, DY268_GW4064$`5.DY268(1uM) CD4_p`&lt;=0.05 &amp; DY268_GW4064$`3.GW4064(1uM) CD4_p`&gt;0.05 ~ &#39;green3&#39;, DY268_GW4064$`5.DY268(1uM) CD4_p`&gt;0.05 &amp; DY268_GW4064$`3.GW4064(1uM) CD4_p`&lt;=0.05 ~ &#39;blue&#39;, DY268_GW4064$`5.DY268(1uM) CD4_p`&gt;0.05 &amp; DY268_GW4064$`3.GW4064(1uM) CD4_p`&gt;=0.05 ~ &#39;grey80&#39;)) ggplot(DY268_GW4064[DY268_GW4064$annotation!=&#39;grey80&#39;,], aes(x = `5.DY268(1uM) CD4_s`, y = `3.GW4064(1uM) CD4_s`)) + geom_point(size = 5, color = DY268_GW4064[DY268_GW4064$annotation!=&#39;grey80&#39;,]$annotation, alpha=0.7) + geom_rug() + theme_pubr() + stat_smooth(method = &quot;lm&quot;, formula = y ~ x, col=&#39;black&#39;, geom = &quot;smooth&quot;) + stat_cor(method=&quot;pearson&quot;) "],["rna-sequncing-in-mice-figure-2-anastasia-kousa.html", "Chapter 11 RNA sequncing in mice (Figure 2): Anastasia Kousa 11.1 read in file 11.2 link ensembl ids to gene names 11.3 Read in the count file: - D7 11.4 plot GSEA results facet by organ - Hallmarks - D7", " Chapter 11 RNA sequncing in mice (Figure 2): Anastasia Kousa #renv::activate() #renv::init() #renv::install(&quot;renv&quot;) #renv::status() #renv::snapshot() #renv::restore() #if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) # install.packages(&quot;BiocManager&quot;) #renv::install(&quot;bioc::BiocManager&quot;, force=T) #renv::install(&quot;bioc::biomaRt&quot;, force=T) #renv::install(&quot;bioc::edgeR&quot;, force=T) #renv::install(&quot;bioc::EnhancedVolcano&quot;, force=T) #renv::install(&quot;tibble&quot;, force=T) #renv::install(&quot;ggpubr&quot;, force=T) #renv::install(&quot;pheatmap&quot;, force=T) #renv::install(&quot;dichromat&quot;, force=T) #renv::install(&quot;grid&quot;, force=T) #renv::install(&quot;patchwork&quot;, force=T) library(biomaRt) library(edgeR) library(EnhancedVolcano) ## Loading required package: ggrepel library(tibble) library(ggpubr) library(pheatmap) library(dichromat) library(grid) library(patchwork) library(BiocManager) library(cowplot) ensembl = useMart(biomart=&quot;ENSEMBL_MART_ENSEMBL&quot;, dataset=&quot;mmusculus_gene_ensembl&quot;, host = &#39;https://may2021.archive.ensembl.org&#39;, verbose = TRUE) ## BioMartServer running BioMart version: 0.7 ## Mart virtual schema: default ## Mart host: https://may2021.archive.ensembl.org:443/biomart/martservice ## Checking attributes ...Attempting web service request: ## https://may2021.archive.ensembl.org:443/biomart/martservice?type=attributes&amp;dataset=mmusculus_gene_ensembl&amp;requestid=biomaRt&amp;mart=ENSEMBL_MART_ENSEMBL&amp;virtualSchema=default ## ok ## Checking filters ...Attempting web service request: ## https://may2021.archive.ensembl.org:443/biomart/martservice?type=filters&amp;dataset=mmusculus_gene_ensembl&amp;requestid=biomaRt&amp;mart=ENSEMBL_MART_ENSEMBL&amp;virtualSchema=default ## ok 11.1 read in file BMT_liv_int &lt;- read.table( &quot;/Volumes/Macintosh HD/Users/miltiado/Documents/BA/Anastasia/gsea_mice/BMT7_liver-intestine.txt&quot;, sep=&quot;\\t&quot;, row.names=1, header=TRUE, as.is = TRUE, stringsAsFactors = TRUE) nrow(BMT_liv_int) # needs to be 53379 for GRCm39 -Ensembl 104 May 2021 http://may2021.archive.ensembl.org 104- ## [1] 53379 colnames(BMT_liv_int) &lt;- sub(&quot;\\\\.\\\\.&quot;, &#39;&#39;, sub(&#39;_IGO.*&#39;, &#39;&#39;, colnames(BMT_liv_int))) rownames(BMT_liv_int) &lt;- sub(&#39;\\\\..*&#39;, &#39;&#39;, rownames(BMT_liv_int)) 11.2 link ensembl ids to gene names geneNames &lt;- getBM(filters= &quot;ensembl_gene_id&quot;, attributes= c(&quot;ensembl_gene_id&quot;, &quot;external_gene_name&quot;), values=rownames(BMT_liv_int), mart=ensembl) names &lt;- geneNames[,1] geneNames &lt;- as.data.frame(geneNames) rownames(geneNames) = names merged &lt;- merge(BMT_liv_int, geneNames, by=&quot;row.names&quot;, all=FALSE) BMT_liv_int &lt;- merged[,c(2:24,26)] rownames(BMT_liv_int) &lt;- merged[,1] 11.3 Read in the count file: - D7 dgeBMT_liv_int &lt;- DGEList(counts=BMT_liv_int[,6:23], genes = BMT_liv_int[,c(24,5)]) rownames(dgeBMT_liv_int$samples) ## [1] &quot;D7_SI_BM_005&quot; &quot;D7_LI_BM_002&quot; &quot;D7_SI_BMT_009&quot; &quot;D7_SI_BM_004&quot; ## [5] &quot;D7_SI_BMT_010&quot; &quot;D7_LI_BMT_010&quot; &quot;D7_LIV_BM_004&quot; &quot;D7_LIV_BM_002&quot; ## [9] &quot;D7_LI_BM_005&quot; &quot;D7_LI_BM_004&quot; &quot;D7_LIV_BMT_010&quot; &quot;D7_LI_BMT_006&quot; ## [13] &quot;D7_LIV_BM_005&quot; &quot;D7_LIV_BMT_009&quot; &quot;D7_LI_BMT_009&quot; &quot;D7_SI_BM_002&quot; ## [17] &quot;D7_LIV_BMT_006&quot; &quot;D7_SI_BMT_006&quot; nrow(dgeBMT_liv_int) # 49915 ## [1] 49915 # filter out lowly expressed genes # count the number of genes that are not expressed in any of the samples - for now subselect only day 7 data: FALSE 32751 TRUE 17164 table(rowSums(dgeBMT_liv_int$counts==0)==length(rownames(dgeBMT_liv_int$samples))) # FALSE 30678 TRUE 19237 ## ## FALSE TRUE ## 30678 19237 dgeBMT_liv_int$condition &lt;- as.factor(sub( &#39;.*_&#39;, &#39;&#39;, sub(&quot;_0.*&quot;, &#39;&#39;, rownames(dgeBMT_liv_int$samples)))) dgeBMT_liv_int$tissue &lt;- as.factor(sub( &#39;.*_&#39;, &#39;&#39;, sub(&quot;_B.*&quot;, &#39;&#39;, rownames(dgeBMT_liv_int$samples)))) dgeBMT_liv_int$groups &lt;- as.factor(paste0(sub( &#39;_0.*&#39;, &#39;&#39;, sub(&#39;D.?.?_&#39;, &#39;&#39;, rownames(dgeBMT_liv_int$samples))),&quot;&quot;, dgeBMT_liv_int$day)) # filter out lowly expressed genes with filterByExpr function keep.exprs &lt;- filterByExpr(dgeBMT_liv_int, group=dgeBMT_liv_int$groups) dgeBMT_liv_int &lt;- dgeBMT_liv_int[keep.exprs,, keep.lib.sizes=FALSE] # the filtered DGEList-object keeps the gene information for the retained genes correctly associated. dim(dgeBMT_liv_int) # 17187 18 ## [1] 17187 18 # calculate different library sizes dgeBMT_liv_int &lt;- calcNormFactors(dgeBMT_liv_int) # create the design model that fits the data, Batch? designBMT_liv_int &lt;- model.matrix(~0 + dgeBMT_liv_int$groups) colnames(designBMT_liv_int) &lt;- sub(&quot;dgeBMT_liv_int\\\\$groups&quot;, &quot;&quot;, colnames(designBMT_liv_int)) # run voom v &lt;- voom(dgeBMT_liv_int, designBMT_liv_int, plot=TRUE) # fit linear model fit &lt;- lmFit(v, designBMT_liv_int) cm &lt;- makeContrasts( LI_BMT-LI_BM, SI_BMT-SI_BM, LIV_BMT-LIV_BM, levels=designBMT_liv_int) # differential expression analysis fit2 &lt;- contrasts.fit(fit, cm) fit2 &lt;- eBayes(fit2) fit2$groupMeans &lt;- fit$coefficients x=1 vs = c(&quot;LI_BMTvsBM&quot;, &quot;SI_BMTvsBM&quot;, &quot;LIV_BMTvsBM&quot;) for (x in 1:3) { BMT_liv_intTable &lt;- topTable(fit2, coef = x, genelist =data.frame(fit2$genes,fit2$groupMeans), number = Inf, adjust=&quot;BH&quot;) # write.table(BMT_liv_intTable, paste0(&quot;~/results/v2/&quot;, vs[x], &quot;_only_D7.txt&quot;), sep=&quot;\\t&quot;, col.names=NA) # save as .rnk for running pathway enrichment analysis with GSEA topTable_to_rank &lt;- BMT_liv_intTable # just using logFC as the ranking parameter - or now subselect only day 7 data: c(1,15) rankfile = na.omit(topTable_to_rank[,c(1,9)]) rankfile_sorted = rankfile[order(rankfile$logFC, decreasing = TRUE),] #ss write.table(rankfile_sorted, paste0(&quot;/results/v2/&quot;, vs[x], &quot;_only_D7.rnk&quot;), sep = &#39;\\t&#39;, row.names = FALSE, quote = FALSE) } 11.4 plot GSEA results facet by organ - Hallmarks - D7 setwd(&quot;/Users/miltiado/Documents/BA/Anastasia/gsea_mice/&quot;) gsea_result_files &lt;- list.files(recursive = TRUE, pattern = &quot;^gsea_report(.*)tsv$&quot;) # within the for loop I change the order of the organs organ_annotation = c(&quot;LIV&quot;, &quot;LIV&quot;, &quot;SI&quot;, &quot;SI&quot;, &quot;LI&quot;, &quot;LI&quot;) day_annotation = c(&quot;D7&quot;, &quot;D7&quot;, &quot;D7&quot;, &quot;D7&quot;, &quot;D7&quot;, &quot;D7&quot;) i=1 all_gsea_results = tibble(&quot;GS PATHWAY&quot;=factor(), &quot;GS DETAILS&quot;=integer(), &quot;SIZE&quot;=double(), &quot;ES&quot;=double(), &quot;NES&quot;=double(), &quot;NOM p-val&quot;=double(), &quot;FDR q-val&quot;=double(), &quot;FWER p-val&quot;=double(), &quot;RANK&quot;=integer(), &quot;LEADING EDGE&quot;=factor(), &quot;GROUP&quot;=factor(), &quot;ORGAN&quot; = factor(), &quot;DAY&quot; = factor()) for (path in gsea_result_files[c(3:4, 5:6, 1:2)]){ gsea_results = tibble(read.table(path, sep=&quot;\\t&quot;, row.names = 1, skip = 1)) colnames(gsea_results) = c(&quot;GS PATHWAY&quot;, &quot;GS DETAILS&quot;, &quot;SIZE&quot;, &quot;ES&quot;, &quot;NES&quot;, &quot;NOM p-val&quot;, &quot;FDR q-val&quot;, &quot;FWER p-val&quot;, &quot;RANK&quot;, &quot;LEADING EDGE&quot;, &quot;GROUP&quot;) gsea_results$GROUP = rep(as.factor(substring(path, 64,76)), nrow(gsea_results)) gsea_results$ORGAN = rep(as.factor(organ_annotation[i]), nrow(gsea_results)) gsea_results$DAY = rep(as.factor(day_annotation[i]), nrow(gsea_results)) all_gsea_results = rbind(all_gsea_results, gsea_results) i=i+1 } all_gsea_results = all_gsea_results[all_gsea_results$NES!=&quot;---&quot;,] all_gsea_results$NES = as.double(all_gsea_results$NES) all_gsea_results$`-10log(FDR q-val)` = -log(all_gsea_results$`FDR q-val`+0.00001,10) all_gsea_results$trFDR = all_gsea_results$`-10log(FDR q-val)` p &lt;- ggdotchart(all_gsea_results[(all_gsea_results$`FDR q-val`&lt;=0.05) ,], &#39;GS PATHWAY&#39;, &#39;NES&#39;, shape=19, sorting = &quot;ascending&quot;, add = &quot;segments&quot;,color= &#39;NES&#39;, rotate=TRUE, dot.size=&#39;trFDR&#39;, ggtheme = theme_pubr()) +facet_grid(DAY~ORGAN) + scale_colour_gradientn(colours = dichromat::colorschemes$DarkRedtoBlue.12) + geom_hline(yintercept = 0, linetype = 2, color = &quot;lightgray&quot;) + ylim(-3,3) + font(&quot;xy.text&quot;, size=9) # workaround - add the right color to the background strip p2e &lt;- ggplot_gtable(ggplot_build(p)) strip_both &lt;- which(grepl(&#39;strip-&#39;, p2e$layout$name)) fills &lt;- c(&quot;#FC4E07&quot;, &quot;#E7B800&quot;, &quot;#00AFBB&quot;) k &lt;- 1 for (i in strip_both) { j &lt;- which(grepl(&#39;rect&#39;, p2e$grobs[[i]]$grobs[[1]]$childrenOrder)) p2e$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill &lt;- fills[k] k &lt;- k+1 } grid.draw(p2e) bile_acid_LIV &lt;- c(&#39;Serpina6&#39;, &#39;Cyp7b1&#39;, &#39;Slco1a4&#39;, &#39;Acsl5&#39;, &#39;Cat&#39;, &#39;Abcg8&#39;, &#39;Fads2&#39;, &#39;Crot&#39;, &#39;Ttr&#39;, &#39;Bbox1&#39;, &#39;Fads1&#39;, &#39;Paox&#39;, &#39;Agxt&#39;, &#39;Idh1&#39;, &#39;Ephx2&#39;, &#39;Slc23a2&#39;, &#39;Sult1b1&#39;, &#39;Nr0b2&#39;, &#39;Abcd3&#39;, &#39;Npc1&#39;, &#39;Lonp2&#39;, &#39;Idh2&#39;, &#39;Abcd2&#39;, &#39;Aldh1a1&#39;, &#39;Hsd17b11&#39;, &#39;Pex7&#39;, &#39;Sod1&#39;, &#39;Pecr&#39;, &#39;Nr3c2&#39;, &#39;Hsd17b6&#39;, &#39;Slc22a18&#39;, &#39;Isoc1&#39;, &#39;Nudt12&#39;, &#39;Aldh9a1&#39;) p2f &lt;- pheatmap(v$E[v$genes$external_gene_name %in% bile_acid_LIV,c(7,8, 11, 13,14, 17)], scale = &quot;row&quot;, cellwidth = 15, cellheight = 9, color = colorschemes$DarkRedtoBlue.18, labels_row = v[v$genes$external_gene_name %in% bile_acid_LIV,]$genes$external_gene_name, fontsize = 9, cluster_cols = TRUE, cluster_rows = FALSE) #change colors for the GSEA plots ggdraw(grid.draw(p2e)) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
